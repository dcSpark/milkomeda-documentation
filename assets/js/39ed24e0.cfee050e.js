"use strict";(self.webpackChunkmilkomeda_documentation=self.webpackChunkmilkomeda_documentation||[]).push([[590],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(n),u=o,f=d["".concat(c,".").concat(u)]||d[u]||m[u]||a;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9305:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return u},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return m}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],l={sidebar_label:"Deploying a Smart Contract",sidebar_position:7},c="Deploying a Smart Contract",s={unversionedId:"getting-started/for-developers/deploying-a-smart-contract",id:"getting-started/for-developers/deploying-a-smart-contract",title:"Deploying a Smart Contract",description:"Here we will deploy a Solidity smart contract on the Milkomeda C1 sidechain. In this example, we will use Remix  to deploy the contract. You can access Remix by visiting the following link: Remix IDE\u200b",source:"@site/docs/getting-started/for-developers/deploying-a-smart-contract.md",sourceDirName:"getting-started/for-developers",slug:"/getting-started/for-developers/deploying-a-smart-contract",permalink:"/milkomeda-documentation/docs/getting-started/for-developers/deploying-a-smart-contract",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_label:"Deploying a Smart Contract",sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Unwrapping Assets",permalink:"/milkomeda-documentation/docs/getting-started/for-developers/unwrapping-assets-for-devs"},next:{title:"Wallet Integration",permalink:"/milkomeda-documentation/docs/getting-started/for-developers/wallet-integration"}},p={},m=[],d={toc:m};function u(e){var t=e.components,l=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},d,l,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"deploying-a-smart-contract"},"Deploying a Smart Contract"),(0,a.kt)("p",null,"Here we will deploy a Solidity smart contract on the Milkomeda C1 sidechain. In this example, we will use Remix ",(0,a.kt)("a",{parentName:"p",href:"http://remix.ethereum.org/"})," to deploy the contract. You can access Remix by visiting the following link: ",(0,a.kt)("a",{parentName:"p",href:"http://remix.ethereum.org/"},"Remix IDE"),"\u200b"),(0,a.kt)("p",null,'First, create the solidity smart contract file. Inside the Remix window, click the "',(0,a.kt)("strong",{parentName:"p"},"Contracts"),'" folder in the left panel, then click the "',(0,a.kt)("strong",{parentName:"p"},"New File"),'" button in the central panel.'),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(7359).Z,width:"969",height:"834"})),(0,a.kt)("p",null,'Now you will be prompted to enter a filename for a new Solidity smart contract. The filename is arbitrary, but for the purposes of this example we will be deploying an ERC-20 smart contract so we will name the file "Test_ERC20.sol". Type the filename and press ',(0,a.kt)("strong",{parentName:"p"},"Enter"),". The cursor should move to the edit panel where you can input your Solidity code. Enter the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-pragma",metastring:"solidity ^0.7.0;",solidity:!0,"^0.7.0;":!0},'\nimport "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.4.0-solc-0.7/contracts/token/ERC20/ERC20.sol";\n\ncontract Token is ERC20 {\n\n    constructor () ERC20("Token", "TKN") {\n        _mint(msg.sender, 1000000 * (10 ** uint256(decimals())));\n    }\n}\n')),(0,a.kt)("p",null,'Next, click the "',(0,a.kt)("strong",{parentName:"p"},"Solidity compiler"),'" icon on the left side of the screen, choose a compiler version (for this example we will use ',(0,a.kt)("strong",{parentName:"p"},"0.7.6+commit.7338295f"),'), and then click "',(0,a.kt)("strong",{parentName:"p"},"Compile Test_ERC20.sol"),'", as shown.'),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(3549).Z,width:"925",height:"706"})),(0,a.kt)("p",null,'Click the "',(0,a.kt)("strong",{parentName:"p"},"Deploy and run transactions"),'" icon on the left, and from the "',(0,a.kt)("strong",{parentName:"p"},"Environment"),'" pulldown select "',(0,a.kt)("strong",{parentName:"p"},"Injected Web3"),'", as shown. This will bring up the MetaMask screen where you will need to click "',(0,a.kt)("strong",{parentName:"p"},"Next"),'" and then "',(0,a.kt)("strong",{parentName:"p"},"Connect"),'" to connect your C1 wallet with Remix.'),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(8712).Z,width:"360",height:"450"})),(0,a.kt)("p",null,'With your MetaMask wallet now connected, click the "',(0,a.kt)("strong",{parentName:"p"},"Deploy"),'" button to deploy the smart contract to the Milkomeda C1 sidechain.'),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(3991).Z,width:"370",height:"480"})),(0,a.kt)("p",null,"Confirm the transaction in MetaMask."),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(1367).Z,width:"340",height:"575"})),(0,a.kt)("p",null,'You should now see the following under "',(0,a.kt)("strong",{parentName:"p"},"Deployed Contracts"),'" on the left side of the Remix IDE screen.'),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(5856).Z,width:"556",height:"1205"})),(0,a.kt)("p",null,"Finally, let's look at how to unwrap our milkTADA back into tADA on the Cardano Testnet."))}u.isMDXComponent=!0},3549:function(e,t,n){t.Z=n.p+"assets/images/remix-compile-0227a3e401e2202947adbd13d8037a47.png"},8712:function(e,t,n){t.Z=n.p+"assets/images/remix-connect-wallet-9ccc397c8b443355180537a2db45268c.png"},1367:function(e,t,n){t.Z=n.p+"assets/images/remix-deploy-confirm-b5b04a6dfd761806d53de3d0c3d632b7.png"},3991:function(e,t,n){t.Z=n.p+"assets/images/remix-deploy-c41a02a593d4c3b3bbf8093bfa4e8826.png"},7359:function(e,t,n){t.Z=n.p+"assets/images/remix-new-file-f6091d0d25dbb680167220374c63168c.png"},5856:function(e,t,n){t.Z=n.p+"assets/images/remix-see-deployed-1de837596229ca746a64fa325847eff2.png"}}]);