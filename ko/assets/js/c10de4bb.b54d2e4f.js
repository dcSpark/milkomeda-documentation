"use strict";(self.webpackChunkmilkomeda_documentation=self.webpackChunkmilkomeda_documentation||[]).push([[7407],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),u=o,g=m["".concat(s,".").concat(u)]||m[u]||d[u]||a;return n?r.createElement(g,i(i({ref:t},p),{},{components:n})):r.createElement(g,i({ref:t},p))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1487:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));n.p;const a={sidebar_position:4},i="\uc2a4\ub9c8\ud2b8 \ucee8\ud2b8\ub799\ud2b8 \ubc30\ud3ec",l={unversionedId:"algorand/for-developers/deploying-a-smart-contract",id:"algorand/for-developers/deploying-a-smart-contract",title:"\uc2a4\ub9c8\ud2b8 \ucee8\ud2b8\ub799\ud2b8 \ubc30\ud3ec",description:"Here we will deploy a Solidity smart contract on the Milkomeda A1 rollup. In this example, we will use Remix to deploy the contract. You can access Remix by visiting the following link: Remix IDE",source:"@site/i18n/ko/docusaurus-plugin-content-docs/current/algorand/for-developers/deploying-a-smart-contract.mdx",sourceDirName:"algorand/for-developers",slug:"/algorand/for-developers/deploying-a-smart-contract",permalink:"/milkomeda-documentation/ko/algorand/for-developers/deploying-a-smart-contract",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"\uc790\uc0b0 \ub7a9\ud551",permalink:"/milkomeda-documentation/ko/algorand/for-developers/wrapping-assets"},next:{title:"For End-users",permalink:"/milkomeda-documentation/ko/algorand/for-end-users/"}},s={},c=[],p={toc:c};function d(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"\uc2a4\ub9c8\ud2b8-\ucee8\ud2b8\ub799\ud2b8-\ubc30\ud3ec"},"\uc2a4\ub9c8\ud2b8 \ucee8\ud2b8\ub799\ud2b8 \ubc30\ud3ec"),(0,o.kt)("p",null,"Here we will deploy a Solidity smart contract on the Milkomeda A1 rollup. In this example, we will use Remix",(0,o.kt)("a",{parentName:"p",href:"http://remix.ethereum.org/"}," "),"to deploy the contract. You can access Remix by visiting the following link: ",(0,o.kt)("a",{parentName:"p",href:"http://remix.ethereum.org/"},"Remix IDE")),(0,o.kt)("p",null,"\uba3c\uc800 Solidity \uc2a4\ub9c8\ud2b8 \uacc4\uc57d \ud30c\uc77c\uc744 \ub9cc\ub4ed\ub2c8\ub2e4. Remix \ucc3d\uc758 \uc67c\ucabd \ud328\ub110\uc5d0\uc11c ",(0,o.kt)("strong",{parentName:"p"},"Contracts"),"(\ucee8\ud2b8\ub799\ud2b8) \ud3f4\ub354\ub97c \ud074\ub9ad\ud55c \ub2e4\uc74c \uc911\uc559 \ud328\ub110\uc758 ",(0,o.kt)("strong",{parentName:"p"},"New File "),"(\uc0c8 \ud30c\uc77c) \ubc84\ud2bc\uc744 \ud074\ub9ad\ud569\ub2c8\ub2e4."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Algorand remix",src:n(8966).Z,width:"969",height:"834"})),(0,o.kt)("p",null,'\uadf8\ub7ec\uba74 \uc0c8 Solidity \uc2a4\ub9c8\ud2b8 \uacc4\uc57d\uc758 \ud30c\uc77c \uc774\ub984\uc744 \uc785\ub825\ud558\ub77c\ub294 \uba54\uc2dc\uc9c0\uac00 \ud45c\uc2dc\ub429\ub2c8\ub2e4. \uc5ec\uae30\uc11c\ub294 ERC-20 \uc2a4\ub9c8\ud2b8 \uacc4\uc57d\uc744 \ubc30\ud3ec\ud558\uae30 \uc704\ud574 "Test_ERC20.sol"\uc774\ub77c\ub294 \ud30c\uc77c \uc774\ub984\uc744 \ubd99\uc774\uae30\ub85c \ud569\uc2dc\ub2e4. \ud30c\uc77c \uc774\ub984\uc744 \uc785\ub825\ud558\uace0 ',(0,o.kt)("strong",{parentName:"p"},"Enter"),"\ub97c \ub204\ub985\ub2c8\ub2e4. \ucee4\uc11c\uac00 \ud3b8\uc9d1 \ud328\ub110\ub85c \uc774\ub3d9\ud558\ubbc0\ub85c Solidity \ucf54\ub4dc\ub97c \uc785\ub825\ud569\ub2c8\ub2e4. \ucf54\ub4dc\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'pragma solidity ^0.7.0;\n\nimport "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.4.0-solc-0.7/contracts/token/ERC20/ERC20.sol";\n\ncontract Token is ERC20 {\n\n    constructor () ERC20("Token", "TKN") {\n        _mint(msg.sender, 1000000 * (10 ** uint256(decimals())));\n    }\n}\n')),(0,o.kt)("p",null,"\uadf8 \ub2e4\uc74c \ud654\uba74 \uc67c\ucabd\uc5d0 \ud45c\uc2dc\ub418\ub294 ",(0,o.kt)("strong",{parentName:"p"},"Solidity compiler"),"(Solidity \ucef4\ud30c\uc77c\ub7ec) \uc544\uc774\ucf58\uc744 \ud074\ub9ad\ud558\uc5ec \ucef4\ud30c\uc77c\ub7ec \ubc84\uc804\uc744 \uc120\ud0dd\ud569\ub2c8\ub2e4(\uc774 \uc608\uc5d0\uc11c\ub294 ",(0,o.kt)("strong",{parentName:"p"},"0.7.6+commit.7338295f"),"\ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\uc74c). \uadf8 \ub2e4\uc74c\uc5d0 \uc544\ub798\uc640 \uac19\uc774 ",(0,o.kt)("strong",{parentName:"p"},"Compile Test_ERC20.sol"),"\uc744 \ud074\ub9ad\ud569\ub2c8\ub2e4."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Solidity compiler",src:n(171).Z,width:"925",height:"706"})),(0,o.kt)("p",null,"\uc67c\ucabd\uc758 ",(0,o.kt)("strong",{parentName:"p"},"Deploy and run transactions"),"(\ud2b8\ub79c\uc7ad\uc158 \ubc30\ud3ec \ubc0f \uc2e4\ud589) \uc544\uc774\ucf58\uc744 \ud074\ub9ad\ud558\uace0 \ub2e4\uc74c\uacfc \uac19\uc774 ",(0,o.kt)("strong",{parentName:"p"},"Environment "),"(\ud658\uacbd) \ub4dc\ub86d\ub2e4\uc6b4 \uba54\ub274\uc5d0\uc11c ",(0,o.kt)("strong",{parentName:"p"},"Injected Web3"),'\uc744 \uc120\ud0dd\ud569\ub2c8\ub2e4. This will bring up the MetaMask screen where you will need to click "',(0,o.kt)("strong",{parentName:"p"},"Next"),'" and then "',(0,o.kt)("strong",{parentName:"p"},"Connect"),'" to connect your A1 wallet with Remix.'),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(6778).Z,width:"360",height:"450"})),(0,o.kt)("p",null,'With your MetaMask wallet now connected, click the "',(0,o.kt)("strong",{parentName:"p"},"Deploy"),'" button to deploy the smart contract to the Milkomeda A1 Rollup.'),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(8300).Z,width:"370",height:"480"})),(0,o.kt)("p",null,"MetaMask\uc5d0\uc11c \uac70\ub798\ub97c \ud655\uc778\ud569\ub2c8\ub2e4."),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(4449).Z,width:"724",height:"1244"})),(0,o.kt)("p",null,"Remix IDE \ud654\uba74\uc758 \uc67c\ucabd\uc5d0 \uc788\ub294 '",(0,o.kt)("strong",{parentName:"p"},"Deployed Contracts"),"(\ubc30\ud3ec\ub41c \uacc4\uc57d)'\uc5d0\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ud45c\uc2dc\ub429\ub2c8\ub2e4."),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(606).Z,width:"642",height:"1248"})),(0,o.kt)("p",null,"You can copy the address of the ERC20 smart contract and use it in Metamask to add your recently created tokens. Click on ",(0,o.kt)("inlineCode",{parentName:"p"},"Import tokens")," and then paste the contract address."),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(8947).Z,width:"736",height:"538"})),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(5804).Z,width:"716",height:"1200"})),(0,o.kt)("p",null,"Finally, click on ",(0,o.kt)("inlineCode",{parentName:"p"},"Add Custom Token")," and you should be able to see your tokens! Now you are able to transfer them and interact with smart contracts."))}d.isMDXComponent=!0},8947:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/algorand-assets-7f72f9d39ab1437c0696cafca072501b.png"},606:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/algorand-deploy-run-231d5df0a1e9615a841e21e7c9f29ea4.png"},5804:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/algorand-import-83ac26fcfdb5dcb4e55368269a04b5ea.png"},4449:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/algorand-metamask-details-1c01a756d7fde76b53d2a8ed9ad866fc.png"},8966:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/algorand-remix-f6091d0d25dbb680167220374c63168c.png"},6778:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/algorand-solidity-compiler-2-9ccc397c8b443355180537a2db45268c.png"},8300:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/algorand-solidity-compiler-3-c41a02a593d4c3b3bbf8093bfa4e8826.png"},171:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/algorand-solidity-compiler-0227a3e401e2202947adbd13d8037a47.png"}}]);